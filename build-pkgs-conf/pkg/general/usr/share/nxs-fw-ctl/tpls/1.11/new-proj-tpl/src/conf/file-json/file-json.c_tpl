#ifdef USE_NXS_JSON

// clang-format off

#include <nxs-core/nxs-core.h>

/* Project core include */
#include <%%NXS_TPL_P_NAME%%-core.h>
#include <%%NXS_TPL_P_NAME%%-meta.h>
#include <%%NXS_TPL_P_NAME%%-collections.h>
#include <%%NXS_TPL_P_NAME%%-dal.h>

#include <conf/file-json/file-json.h>

/* Definitions */



/* Project globals */
extern		nxs_process_t				process;
extern		%%NXS_TPL_P_INLINE_NAME%%_cfg_t		%%NXS_TPL_P_INLINE_NAME%%_cfg;

/* Module typedefs */



/* Module declarations */



/* Module internal (static) functions prototypes */

// clang-format on

static nxs_cfg_json_state_t	%%NXS_TPL_P_INLINE_NAME%%_conf_file_json_prep			(nxs_cfg_json_t cfg);
static nxs_cfg_json_state_t	%%NXS_TPL_P_INLINE_NAME%%_conf_file_json_post			(nxs_cfg_json_t cfg);

static nxs_cfg_json_state_t	%%NXS_TPL_P_INLINE_NAME%%_conf_file_json_read_log		(nxs_process_t *proc, nxs_json_t *json, nxs_cfg_json_par_t *cfg_json_par_el);

// clang-format off

/* Module initializations */

static nxs_string_t	_s_par_logging		= nxs_string("logging");
static nxs_string_t	_s_par_level		= nxs_string("level");
static nxs_string_t	_s_par_path		= nxs_string("path");

/* Module global functions */

// clang-format on

void %%NXS_TPL_P_INLINE_NAME%%_conf_file_json_init(%%NXS_TPL_P_INLINE_NAME%%_cfg_ctx_t *cfg_ctx)
{

}

%%NXS_TPL_P_INLINE_NAME%%_err_t %%NXS_TPL_P_INLINE_NAME%%_conf_file_json_runtime(%%NXS_TPL_P_INLINE_NAME%%_cfg_ctx_t *cfg_ctx)
{
	nxs_cfg_json_t		cfg_json;
	nxs_array_t		cfg_arr;
	%%NXS_TPL_P_INLINE_NAME%%_err_t		rc;
	
	rc = %%NXS_TPL_P_UPCASE_NAME%%_E_OK;

	nxs_cfg_json_conf_array_init(&cfg_arr);
	
	// clang-format off

	nxs_cfg_json_conf_array_add(&cfg_arr,	&_s_par_logging,	&%%NXS_TPL_P_INLINE_NAME%%_cfg.log,	&%%NXS_TPL_P_INLINE_NAME%%_conf_file_json_read_log,	NULL,	NXS_CFG_JSON_TYPE_VOID,	0,	0,	NXS_YES,	NULL);

	// clang-format on

	nxs_cfg_json_init(&process, &cfg_json, &cfg_ctx->cfg_path, &%%NXS_TPL_P_INLINE_NAME%%_conf_file_json_prep, &%%NXS_TPL_P_INLINE_NAME%%_conf_file_json_post, &cfg_arr);

	if(nxs_cfg_json_read_file(&process, cfg_json) != NXS_CFG_JSON_CONF_OK){

		nxs_log_write_raw(&process, "json config read error");

		nxs_error(rc, %%NXS_TPL_P_UPCASE_NAME%%_E_ERR, error);
	}

error:

	nxs_cfg_json_free(&cfg_json);

	nxs_cfg_json_conf_array_free(&cfg_arr);

	return rc;
}

/* Module internal (static) functions */

/* Project config file prepare function */
static nxs_cfg_json_state_t %%NXS_TPL_P_INLINE_NAME%%_conf_file_json_prep(nxs_cfg_json_t cfg)
{

	/* init config values */

	return NXS_CFG_JSON_CONF_OK;
}

/* Project config file post function */

static nxs_cfg_json_state_t %%NXS_TPL_P_INLINE_NAME%%_conf_file_json_post(nxs_cfg_json_t cfg)
{

	/* check all defined config values and prepare program runtime (on error - NXS_CFG_CONF_ERROR value must be returned)*/

	return NXS_CFG_JSON_CONF_OK;
}

/* Project config file auxiliaries functions */

static nxs_cfg_json_state_t %%NXS_TPL_P_INLINE_NAME%%_conf_file_json_read_log(nxs_process_t *proc, nxs_json_t *json, nxs_cfg_json_par_t *cfg_json_par_el)
{
	%%NXS_TPL_P_INLINE_NAME%%_cfg_log_t *var = nxs_cfg_json_get_val(cfg_json_par_el);
	nxs_cfg_json_t          cfg_json;
	nxs_array_t             cfg_arr;
	nxs_cfg_json_state_t    rc;

	rc = NXS_CFG_JSON_CONF_OK;

	nxs_cfg_json_conf_array_init(&cfg_arr);

	// clang-format off

	nxs_cfg_json_conf_array_add(&cfg_arr,	&_s_par_level,	&var->level,	NULL,	NULL,	NXS_CFG_JSON_TYPE_INT_32,	0,	63,	NXS_YES,	NULL);
	nxs_cfg_json_conf_array_add(&cfg_arr,	&_s_par_path,	&var->path,	NULL,	NULL,	NXS_CFG_JSON_TYPE_STRING,	0,	0,	NXS_YES,	NULL);

	// clang-format on

	nxs_cfg_json_init(&process, &cfg_json, NULL, NULL, NULL, &cfg_arr);

	if(nxs_cfg_json_read_json(&process, cfg_json, json) != NXS_CFG_JSON_CONF_OK) {

		nxs_log_write_raw(&process, "config read error: 'logging' block");

		nxs_error(rc, NXS_CFG_JSON_CONF_ERROR, error);
	}

error:

	nxs_cfg_json_free(&cfg_json);

	nxs_cfg_json_conf_array_free(&cfg_arr);

	return rc;
}

#endif /* USE_NXS_JSON */
