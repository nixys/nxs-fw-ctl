#ifndef _INCLUDE_%%NXS_TPL_U_UPCASE_NAME%%_C
#define _INCLUDE_%%NXS_TPL_U_UPCASE_NAME%%_C
#endif

// clang-format off

#include <nxs-core/nxs-core.h>

/* Project core include */
#include <%%NXS_TPL_P_NAME%%-core.h>
#include <%%NXS_TPL_P_NAME%%-meta.h>
#include <%%NXS_TPL_P_NAME%%-collections.h>
#include <%%NXS_TPL_P_NAME%%-dal.h>

#include <units/%%NXS_TPL_U_RPATH%%%%NXS_TPL_U_FILENAME%%-typedefs.h>
#include <units/%%NXS_TPL_U_RPATH%%%%NXS_TPL_U_FILENAME%%.h>
#include <units/%%NXS_TPL_U_RPATH%%%%NXS_TPL_U_FILENAME%%-subunits.h>

/* Definitions */



/* Project globals */
extern		nxs_process_t				process;
extern		%%NXS_TPL_P_INLINE_NAME%%_cfg_t		%%NXS_TPL_P_INLINE_NAME%%_cfg;

/* Module typedefs */



/* Module declarations */

struct %%NXS_TPL_U_INLINE_NAME%%_s
{

};

/* Module internal (static) functions prototypes */

// clang-format on

// clang-format off

/* Module initializations */



/* Module global functions */

// clang-format on

%%NXS_TPL_U_INLINE_NAME%%_t *%%NXS_TPL_U_INLINE_NAME%%_init(void)
{
	%%NXS_TPL_U_INLINE_NAME%%_t	*u_ctx;

	u_ctx = (%%NXS_TPL_U_INLINE_NAME%%_t *)nxs_malloc(NULL, sizeof(%%NXS_TPL_U_INLINE_NAME%%_t));

	return u_ctx;
}

%%NXS_TPL_U_INLINE_NAME%%_t *%%NXS_TPL_U_INLINE_NAME%%_free(%%NXS_TPL_U_INLINE_NAME%%_t *u_ctx)
{

	if(u_ctx == NULL){

		return NULL;
	}

	return (%%NXS_TPL_U_INLINE_NAME%%_t *)nxs_free(u_ctx);
}

/* Module internal (static) functions */

