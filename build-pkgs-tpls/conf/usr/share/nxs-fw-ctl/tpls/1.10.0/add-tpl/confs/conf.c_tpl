#include <nxs-core/nxs-core.h>

// clang-format off

/* Project core include */
#include <%%NXS_TPL_P_NAME%%-core.h>
#include <%%NXS_TPL_P_NAME%%-meta.h>
#include <%%NXS_TPL_P_NAME%%-collections.h>
#include <%%NXS_TPL_P_NAME%%-dal.h>

#include <conf/%%NXS_TPL_C_RPATH%%%%NXS_TPL_C_FILENAME%%.h>

/* Definitions */



/* Project globals */
extern		nxs_process_t				process;
extern		%%NXS_TPL_P_INLINE_NAME%%_cfg_t		%%NXS_TPL_P_INLINE_NAME%%_cfg;

/* Module typedefs */



/* Module declarations */



/* Module internal (static) functions prototypes */

// clang-format on

static %%NXS_TPL_P_INLINE_NAME%%_err_t			%%NXS_TPL_C_INLINE_NAME%%_prep									(%%NXS_TPL_P_INLINE_NAME%%_cfg_ctx_t *cfg_ctx);
static %%NXS_TPL_P_INLINE_NAME%%_err_t			%%NXS_TPL_C_INLINE_NAME%%_post									(%%NXS_TPL_P_INLINE_NAME%%_cfg_ctx_t *cfg_ctx);

// clang-format off

/* Module initializations */



/* Module global functions */

// clang-format on

void %%NXS_TPL_C_INLINE_NAME%%_init(%%NXS_TPL_P_INLINE_NAME%%_cfg_ctx_t *cfg_ctx)
{

}

%%NXS_TPL_P_INLINE_NAME%%_err_t %%NXS_TPL_C_INLINE_NAME%%_runtime(%%NXS_TPL_P_INLINE_NAME%%_cfg_ctx_t *cfg_ctx)
{

	/* call prep-function */
	if(%%NXS_TPL_C_INLINE_NAME%%_prep(cfg_ctx) != %%NXS_TPL_P_UPCASE_NAME%%_E_OK){

		return %%NXS_TPL_P_UPCASE_NAME%%_E_ERR;
	}

	/* conf processing */

	/* call post-function */
	if(%%NXS_TPL_C_INLINE_NAME%%_post(cfg_ctx) != %%NXS_TPL_P_UPCASE_NAME%%_E_OK){

		return %%NXS_TPL_P_UPCASE_NAME%%_E_ERR;
	}

	return %%NXS_TPL_P_UPCASE_NAME%%_E_OK;
}

/* Module internal (static) functions */

/* Project config file prepare function */
static %%NXS_TPL_P_INLINE_NAME%%_err_t %%NXS_TPL_C_INLINE_NAME%%_prep(%%NXS_TPL_P_INLINE_NAME%%_cfg_ctx_t *cfg_ctx)
{

	/* init config values */

	return %%NXS_TPL_P_UPCASE_NAME%%_E_OK;
}

/* Project config file post function */
static %%NXS_TPL_P_INLINE_NAME%%_err_t %%NXS_TPL_C_INLINE_NAME%%_post(%%NXS_TPL_P_INLINE_NAME%%_cfg_ctx_t *cfg_ctx)
{

	/* check all defined config values and prepare program runtime */

	return %%NXS_TPL_P_UPCASE_NAME%%_E_OK;
}

/* Project config file auxiliaries functions */

